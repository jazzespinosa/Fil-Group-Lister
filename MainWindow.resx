<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjVYUAI1W
        FQB/Ww8Cf1sQAotUFQCKVBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJlDABzZA0DbmULHmtl
        Ck1pZQl5a2cJl2tpCKVraQila2gIl2tnCHlsZglMbWQIHm9eCgNuYQkAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHRpDQB0Zg0Gc2wMPnJw
        CplwcgncbXMI+WhxB/9ncQb/Z3IG/2hzBf9ocgX/aXEF/2lvBvlrbQbcbGkHmW1mCD5vYQoGbmQJAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVlDgByewoAdGwNJXNw
        C5lxdgnvcHsI/299B/9tewb/aHUG/2dzBv9ncwb/Z3QF/2h1Bf9odQX/aHUE/2h1BP9pdAT/a28F72xq
        B5luZgglanMEAHBgCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0aQ8AeFgUAXRu
        DUlydQvTcXsJ/3B9CP9wfQj/bXoF/2VzA/9jcAP/ZHED/2VxAv9lcQL/ZXIC/2VyAf9mdAL/aHUE/2h1
        BP9odgT/anQE/2xuBtNuaAhJc1IPAW9jCQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdWoQAIFH
        HgF0cA5YcncL53B9Cf9wfgn/cH4J/298CP+CjTL/lJ1T/5SdUv+UnVL/lZ5S/5WdUf+UnE//lZ5Q/4aQ
        N/9pdgf/aHUF/2h1BP9odgT/aXYD/2txBedtagdYeT8UAW9kCQAAAAAAAAAAAAAAAAAAAAAAAAAAAHZq
        EQBzeAsAdHEOSnJ4DOdxfgr/cX4K/3B+Cf9tewf/bHgQ/8bLpP+3vIv/rrR7/661fP+utXz/r7Z9/8DG
        mf/AxZj/ztKu/3SAGv9ndAT/aXYF/2h1BP9odgT/aXYD/2txBedtaQdKa3IFAG5hCQAAAAAAAAAAAAAA
        AAB7VhcAdHIPAHVwECZzeQ3ScX8L/3F/C/9xfgr/eYUZ/3yGKv+Aijb/ys6r/4aPPf94gib/eYQm/3mE
        Jv91gSD/p65v/6mxc//Hy6P/d4Ig/2d0BP9odQX/aXYF/2h1BP9odgT/aXYD/2xyBdJxawgmcG0HAHdQ
        EAAAAAAAAAAAAHZuEQB4ZhQFdHcOmXJ+DP9yfwz/cX8L/3WCEf/Axpb/xsql/8HGnf/M0K7/wsee/8HG
        m//Bxpv/xMmg/8nNp/+iqmj/l6BW/8XKoP93giD/Z3MF/2h1Bv9odQX/aXYF/2h1BP9qeAT/bHkE/2xv
        BpluWgsFbWUIAAAAAAB3ZRQAdXYQAHV0ED5zfQ7uc4AN/3J/DP9yfwv/eYYY/8bLoP95gyz/aXMS/2l0
        Ev9qdRL/anYS/2p2Ef9yfh3/xMmg/3eCI/9tehP/w8ie/3eCIf9mcwX/aHQG/2h1Bv9odQX/angF/2x5
        BP9pdwT/anME7mxrBz5rbQYAcF0MAHdvEwB9UR0CdHoPmXOADf9zgA3/c4AN/3OADP96hxn/xsqg/3R+
        Jv9kbwr/ZXAL/2VwC/9lcQv/ZXEJ/215Fv/DyJ7/d4Ei/255FP/DyJ7/d4Ih/2ZzBv9ndAf/aHQG/2p3
        Bv9segX/aXcF/2h1BP9odgT/anAFmXVIEgJtZggAdnYSAHZ1Eh50fQ/bc4AO/3OADv9zgA7/c4AN/3qH
        Gv/GyqD/dH8n/2NvC/9lcAz/ZXAM/2ZxDP9lcQr/bngX/8PIn/92gSP/bnkU/8PInv93giL/ZnMG/2d0
        B/9qdwf/bHoG/2l2Bf9odQX/aHUE/2h1BP9pcwXba2sHH2trBwB1fBAAdXsRTHSAD/l0gQ//dIEP/3SB
        D/9zgA7/eoca/8bKoP90fif/Y28M/2RwDf9lcA3/ZnEM/2ZxC/9teBf/w8ef/3aBI/9teRX/w8ie/3eC
        Iv9mcwf/ancI/217B/9pdQb/aHQG/2h1Bf9odQX/aHUE/2h0BPlqbwZMaXEFAHOEDwB1fRF4dIEQ/3SB
        EP90gRD/dIEP/3SBDv97hxv/xsug/3R+KP9jbg3/ZHAO/2RwDf9lcQ3/ZXEM/254GP/Dx5//dH8i/2p2
        Ev/Cx57/d4Ej/2l2B/9tewj/aXYH/2d0B/9ndAb/aHQG/2h1Bf9odQX/aHUE/2lxBXhndwMAcKUHAHWA
        Epd1ghH/dIEQ/3SBEP90gRD/dIEP/3uHHP/Gy6H/dH4o/2RuDv9kbw7/ZHAO/2VwDf9lcQz/bXgZ/8LH
        n/+NlUn/l59Z/83Rr/95hSL/bXoI/2h1Cf9ndAj/Z3QH/2d0B/9ncwb/aHQG/2h1Bf9odAT/aHMFl16T
        AAB6dhwCdYESpXWCEf91ghH/dYIR/3WCEf91ghD/e4gc/8bLof90fyn/Y24O/2VvD/9lbw//ZXAO/2Rv
        DP9sdxf/wcWd/8rOqv/+/v3/xsud/3N/Ef9odAn/Z3IJ/2ZzCP9ndAj/Z3QH/2dzBv9ncwb/Z3QF/2h1
        Bf9odAWlamUNApCZPgJ2gxSldYIS/3WCEv91ghL/dYIS/3WCEf98iB3/xsuh/3R+Kf9jbw//ZHAQ/2Vv
        D/9lcA7/bngc/36HNP/R1Lb/4uXS/8zRp/95hR3/Z3MJ/2VyCf9lcQj/ZnII/2ZzCP9mcwf/Z3MH/2dz
        Bv9ndAb/a3gF/2x5B6VwdS0CQFMAAHmGGJZ2gxP/doMT/3WCE/91ghL/dYIR/3yIHv/GyqH/cnwn/2Fs
        DP9ibg3/Ym4M/2JsCv+vtYL/8fHp/9zfw/+iq1//eYUc/2dyCv9kcAr/aXUR/6mwdf+qsHb/aXUM/2Zz
        CP9mcwf/Z3MH/2t4Bv9ufAX/bnsKllBnAAByfwwAfYkeeHeEFP92gxP/doMT/3aDE/92gxL/fIgd/8vQ
        qv+Yn2L/i5NN/4uUTv+LlE3/i5NM/87Rs//k5s//ipU2/2t4BP9kcAj/Y24I/2p1E/+yuIX//Pz6/8zQ
        rf9qdg//ZnII/2ZzCP9reAf/bnwG/258Bv9yfw94a3oAAH+LIgCCjidMeYYX+XeEFP93hBT/d4QU/3aD
        E/93hBX/pa5l/73Dj/+7woz/u8KM/7vCjP+7woz/u8GK/4qVNf+AjCb/oaho/6mweP+Nlkz/l59b//b3
        8f/X2sD/eoUr/2VwCP9mcgn/a3gI/299B/9ufAb/cH4J+XmGGUx3hBQAipU1AIqVNh58iB3bd4QV/3eE
        Ff93hBT/d4QU/3eEFP91ghH/dYIR/3WCEf90gRD/dIEQ/3SBD/9yfwz/j5o+/9HVs/+3vI//qK53/8fM
        qP/Cxp7/rrR//3uELf9jbwf/ZXEK/2t4Cf9wfQj/b30H/299Bv9zgQ7bg48pHoKOKACUnkUAy8+iAoKO
        J5l4hRf/d4QV/3eEFf93hBX/d4QU/3eEFP92gxP/doMT/3WCEv91ghL/dYIR/3qGGf/L0Kf/l59f/2Nt
        DP9hbAn/bHcZ/8LHoP+aoWD/Ym0H/2VxC/9reAr/cH4J/3B9CP9wfQj/cH4I/3qHGZjHy5wCjZg6AKWt
        YwCIkzIAi5Y3Pn2KH+54hRb/eIQW/3eEFf93hBX/d4QU/3eEFP92gxP/doMT/3WCEv90gRD/iZQz/83R
        r/95gzH/ZXAR/2RvDv9hbAn/k5xX/7vAlP9kbwv/a3gL/3F+Cv9wfgn/cH4J/3B9CP91ghHug48qPoCM
        JQCgqVoAAAAAAJSeRwCkrGIFhpEumXqHGf94hRb/eIUW/3eEFf93hBX/d4QU/3eEFP92gxP/doMT/3SB
        EP+HkjD/ztKw/6yyf/+HkEX/ZG8P/2BrCf+ZoGD/uL6P/2p3Cv9xfwv/cX4K/3F+Cv9wfgn/cn8L/36K
        IZmep1gFjpg7AAAAAAAAAAAAyM6cAI+ZPQCSnEIlg48p0nmGGP94hRb/eIUW/3eEFf93hBX/d4QU/3eE
        FP92gxP/dYIS/3eEFv/DyJj/vcKa/7C1hf97hTP/d4As/83QsP+XoFD/cH0J/3F/C/9xfgv/cX4K/3F/
        Cv97iBzSi5U2JYiSMQDEyZgAAAAAAAAAAAAAAAAAnaZUAIKOJwCQmj5Jgo4n53mFF/94hRb/eIUW/3eE
        Ff93hBX/d4QU/3aDE/92gxP/dIEQ/4WRLf/HzaD/zNCv/8HGn//R1bT/rLRx/3WBEP9yfwz/cX8L/3F/
        C/9xfwv/eoca54iUMkl6iBsAl6BKAAAAAAAAAAAAAAAAAAAAAAAAAAAAmqNPANvevQGQmj5Yg48p53mG
        GP94hRb/d4QW/3eEFf93hBT/d4QU/3aDE/91ghL/dIEQ/3qHGv+TnUX/nKVT/4eTMf9zgA7/c4AN/3J/
        DP9xfwv/coAN/3yIHueJlDNX2uG/AZSeRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAm6RRALzB
        hwGSnEFJh5Iw03yJHv94hRb/d4QV/3eEFf93hBT/doMT/3WCEv91ghL/dYIR/3OADf9yfwz/c4AN/3OA
        Dv9zgA3/c4AM/3aDE/+BjSXTjJY3Sbi8gAGWn0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAoapbAH+LIQCWn0gljZc6mYSPKu57iBz/d4QV/3eEE/92gxP/doMT/3WCEv91ghH/dIEQ/3SB
        D/90gQ7/dIAP/3eEFf9/iyHuiJMxmZCbPyV5hRcAnKZUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJihTgCcpVQGk51FPY2YOpmHki/cgY0l+X2JHv96hhr/eIUX/3iF
        F/95hRj/eocb/36KIfmDjynciZQzmY+ZPT2YoU0GlJ5GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcpVMAoalbA5agSh6SnENMj5k9eI2X
        OZeLljali5Y2pYuWOJeNmDp4kJo/TJOdRR6dp1YDmKJOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADY3rkA2d+7ALzDiQK8wokC2dy9ANjbuwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//5////AA///AAD//gAAf/gAAB/wAAAP8AAAD+AAAAfAAAADwAAAA4AA
        AAGAAAABgAAAAYAAAAGAAAABAAAAAAAAAACAAAABgAAAAYAAAAGAAAABgAAAAcAAAAPAAAAD4AAAB/AA
        AA/wAAAP+AAAH/4AAH//AAD//8AD///+f/8=
</value>
  </data>
</root>